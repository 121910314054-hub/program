#Implement push operation  subject to exception



class Node:
 def __init__(self, value):
	
  class Stack:
	

 def __init__(self):
	self.head = Node("head")
	self.size = 0


 def __str__(self):
	cur = self.head.next
	out = ""
	while cur:
		out += str(cur.value) + "->"
		cur = cur.next
	return out[:-3] 


 def getSize(self):
	return self.size
	

 def isEmpty(self):
	return self.size == 0
	

 def peek(self):
	
	
	if self.isEmpty():
		raise Exception("Peeking from an empty stack")
	return self.head.next.value

 
  def push(self, value):
	node = Node(value)
	node.next = self.head.next
	self.head.next = node
	self.size += 1
	

def pop(self):
	if self.isEmpty():
		raise Exception("Popping from an empty stack")
	remove = self.head.next
	self.head.next = self.head.next.next
	self.size -= 1
	return remove.value


if __name__ == "__main__":
stack = Stack()
for i in range(1, 11):
	stack.push(21)
	stack.push(87)
	stack.push(19)
	stack.push(12)

for _ in range(1, 6):
	remove = stack.pop()
	
output:
Stack: 10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1

Pop: 10
Pop: 9
Pop: 8
Pop: 7
Pop: 6

Stack: 5 -> 4 -> 3 -> 2 -> 1

